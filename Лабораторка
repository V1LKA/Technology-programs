a = 10 + 5
print("10 + 5 =", a)

b = 20 - 7
print("20 - 7 =", b)

c = 4 * 3
print("4 * 3 =", c)

d = 2 ** 5
print("2 ** 5 =", d)

e = 15 / 4
print("15 / 4 =", e)

f = 15 // 4
print("15 // 4 =", f)

g = 15 % 4
print("15 % 4 =", g)



#Лабораторная работа #4
#while
print("выполняет блок кода до тех пор, пока заданное условие истинно (True).")
i=1
while i <= 5:
    print (i)
    i += 1


#for
print("цикл, который позволяет перебирать элементы коллекции (такой как список, строка, кортеж) или повторять блок кода заданное количество раз")
for i in range(1,6):
    print(i)
    

#Лабораторная работа #5
#1
print("Дан произвольный список. и его в обратный порядок.")
lst=[1,2,3,4,5]

lst. reverse()
print(lst)

lst_reversed = lst[::-1]

print(lst_reversed)

#2
print("сортирует список чисел по убыванию их абсолютного значения")
print('[5, 7, 3, 4, 1]')
def list_sort(lst):
    return sorted(lst, key=abs, reverse=True)

lst=[5,7,3,4,1]
sorted_lst = list_sort(lst)
print(sorted_lst)   

#3
print("принимает список и меняет местами его первый и последний элемент")
print('[1, 2, 3, 4, 5]')
def change(lst):
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst

lst = [1,2,3,4,5]
change_lst = change(lst)
print(change_lst)

#Лабораторная работа #6
# Одномерный массив (10 целых чисел)
a = [3, 8, 15, 2, 7, 12, 5, 6, 9, 4]

# Ищем максимум среди нечетных элементов
max_odd = None
for elem in a:
    if elem % 2 != 0:  # проверка на нечетность
        if max_odd is None or elem > max_odd:
            max_odd = elem

print("Массив a(10):", a)
print("Максимум среди нечетных элементов:", max_odd)


# Двумерный массив 4x4
A = [
    [5, 7, 3, 9],
    [1, 4, 8, 6],
    [2, 11, 10, 13],
    [15, 12, 14, 16]
]

print("\nМассив A(4,4):")
for row in A:
    print(row)

# Наибольший по дополнительной диагонали (i + j == 3)
max_secondary_diag = A[0][3]  # первый элемент на диагонали
for i in range(4):
    j = 3 - i
    if A[i][j] > max_secondary_diag:
        max_secondary_diag = A[i][j]

print("Максимальный элемент по дополнительной диагонали:", max_secondary_diag)
